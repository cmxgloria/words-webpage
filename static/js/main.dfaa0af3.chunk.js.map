{"version":3,"sources":["helper.js","components/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["getCleanedText","htmlString","$","cheerio","load","not","contents","map","this","type","text","get","join","replace","getWordCount","word","wordsArray","split","count","forEach","w","toLowerCase","Loader","style","display","justifyContent","padding","color","height","width","App","useState","setWord","loading","setLoading","url","setUrl","setCount","htmlText","setHtmlText","countWordFrequencies","e","a","preventDefault","trim","alert","match","fetch","mode","response","cleanedText","className","src","alt","onSubmit","value","onChange","target","maxWidth","margin","readOnly","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfaa0af3.chunk.js","sourcesContent":["import cheerio from \"cheerio\";\n\nexport const getCleanedText = (htmlString) => {\n  const $ = cheerio.load(htmlString);\n  const text = $(\"html *\")\n    .not($(\"script\")) // ignore script\n    .not($(\"style\")) // ignore style\n    .contents() // text and comment nodes.\n    .map(function () {\n      // Extract Text from HTML with space separators\n      return this.type === \"text\" ? $(this).text() + \" \" : \"\";\n    })\n    .get()\n    .join(\"\")\n    .replace(/[^\\w]/g, \" \")\n    .replace(/\\s+/g, \" \");\n  return text;\n};\n\nexport const getWordCount = (word, text) => {\n  const wordsArray = text.split(/\\s+/);\n  let count = 0;\n  wordsArray.forEach((w) => {\n    if (w.toLowerCase() === word.toLowerCase()) {\n      count++;\n    }\n  });\n  return count;\n};\n\n// https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\nexport const isValidUrl = (string) => {\n  var res = string.match(\n    /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g\n  );\n  return res !== null;\n};\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst Loader = () => (\n  <div style={{ display: \"flex\", justifyContent: \"center\", padding: \"20px\" }}>\n    <ReactLoading type=\"spin\" color=\"#e60278\" height={\"20%\"} width={\"20%\"} />\n  </div>\n);\nexport default Loader;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { getWordCount, getCleanedText, isValidUrl } from \"./helper\";\nimport Loader from \"./components/Loader\";\n\nfunction App() {\n  const [word, setWord] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(\"\");\n  const [count, setCount] = useState();\n  const [htmlText, setHtmlText] = useState(\"\");\n\n  const countWordFrequencies = async (e) => {\n    e.preventDefault();\n    if (!word.trim()) {\n      alert(\"Please provide a word\");\n      return;\n    }\n    if (!isValidUrl(url)) {\n      alert(\"Please provide a valid url\");\n      return;\n    }\n    setLoading(true);\n    setCount(\"\");\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n    try {\n      const response = await fetch(proxyUrl + url, { mode: \"cors\" });\n      const htmlString = await response.text();\n      const cleanedText = getCleanedText(htmlString);\n      const count = getWordCount(word, cleanedText);\n      setHtmlText(cleanedText);\n      setCount(count);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Crawl ${url} failed`);\n    }\n  };\n\n  const updateWords = (e) => {\n    setWord(e.target.value);\n  };\n\n  const updateUrl = (e) => {\n    setUrl(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <img\n        src=\"https://circlein.com/wp-content/uploads/elementor/thumbs/CI-Landscape-Gradient-1-onirtzjrdivx2a3xb8n0t81wxk108wwio6undogxhi.png\"\n        alt=\"logo\"\n      />\n      <h2 className=\"header\">\n        check number of times that word exists in the given url page\n      </h2>\n\n      <div className=\"app-content\">\n        <form className=\"search_form\" onSubmit={countWordFrequencies}>\n          <div className=\"input_wrapper\">\n            <label className=\"word_input\">Word:</label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              value={word}\n              onChange={updateWords}\n            />\n          </div>\n          <div className=\"input_wrapper\">\n            <label className=\"url_input\">URL:</label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              value={url}\n              onChange={updateUrl}\n            />\n          </div>\n\n          <button className=\"search_button\" type=\"submit\">\n            Crawl\n          </button>\n        </form>\n\n        <span className=\"words_times\">\n          Total number of the word{\" \"}\n          <strong style={{ color: \"#e60278\" }}>{word}</strong> appear on page{\" \"}\n          <strong style={{ color: \"#e60278\" }}>{url}</strong>:\n        </span>\n        {loading && <Loader />}\n        <h2>{count}</h2>\n        {htmlText && (\n          <div>\n            <h3 style={{ color: \"#e60278\" }}>Crawled Text from {url}: </h3>\n            <textarea\n              style={{\n                height: \"300px\",\n                maxWidth: \"600px\",\n                width: \"100%\",\n                margin: \"20px\",\n              }}\n              readOnly\n              value={htmlText}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}